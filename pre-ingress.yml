# ADMIN 사용자들을 위한 서비스
apiVersion: v1
kind: Service
metadata:
  name: admin-service
spec:
  selector:
    role: ADMIN  # ✅ Pod의 label과 매칭되도록 수정
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP

---
# BASIC 사용자들을 위한 서비스
apiVersion: v1
kind: Service
metadata:
  name: basic-service
spec:
  selector:
    role: BASIC  # ✅ Pod의 label과 매칭되도록 수정
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP


---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: user-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
#    nginx.ingress.kubernetes.io/whitelist-source-range: "192.168.1.23/32, 10.0.0.0/16"
#    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/16"
#    nginx.ingress.kubernetes.io/auth-url: "http://localhost:8080/api/access/presigned/validate"
#    nginx.ingress.kubernetes.io/auth-snippet: |
#      proxy_set_header X-Original-URI $request_uri;
spec:
  rules:
    - host: tcar.admin.connect.com
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: admin-service
                port:
                  number: 80


    - host: tcar.basic.connection.com
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: basic-service
                port:
                  number: 80


#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: private-ingress
#  annotations:
#    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/16"
#spec:
#  rules:
#    - host: tcar.basic.connection.com
#      http:
#        paths:
#          - path: /
#            pathType: Prefix
#            backend:
#              service:
#                name: my-service
#                port:
#                  number: 80